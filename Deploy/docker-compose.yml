version: '2'

services:
  mysql:
    image: mysql:5.7  # MySQL 的镜像以及版本号
    hostname: mysql  # MySQL在其他docker network中的hostname
    container_name: mysql
    networks:  # 为保证集群之间通信，设置一个docker的内部网络，并为MySQL设置IP地址
      my_net:
        ipv4_address: 172.18.0.11
    environment:  # MySQL 在docker中运行的环境
      MYSQL_ROOT_PASSWORD: 123456  # 设置MySQL的root用户登录密码
    volumes:   # MySQL 在容器中与本机的文件关联
      - "./db:/var/lib/mysql"  # 将MySQL的数据文件与本机关联
      - "./mysql/my.cnf:/etc/my.cnf"  # MySQL的配置文件，主要配置了Bin-Log，以及默认编码等
    ports:  
      - "1162:3306" #云服务器端口1162 容器端口3306
    restart: always

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
        my_net:
          ipv4_address: 172.18.0.12

  kafka:
    image: wurstmeister/kafka       ## 镜像
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.13   # 修改:宿主机IP
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"       # 卡夫卡运行是基于zookeeper的
      KAFKA_BROKER_ID: 116 #brokerid
      AUTO_CREATE_TOPICS_ENABLE: "true" #自动创建topic
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.37.129:9092 
    depends_on:
       - "zookeeper"
    networks:
        my_net:
          ipv4_address: 172.18.0.13

  canal-server: 
    image: canal/canal-server
    hostname: canal/canal-server
    container_name: canal-server
    ports: 
      - "11111:11111"
    volumes:  # 共享文件主要为canal的配置文件
      - "./canal/canal.properties:/home/admin/canal-server/conf/canal.properties"
      - "./canal/instance.properties:/home/admin/canal-server/conf/example/instance.properties"
    depends_on:
       - "mysql"
    networks:
        my_net:
          ipv4_address: 172.18.0.14
  jm:
    image: flink
    hostname: jm
    expose:
      - "6123"
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jm
    volumes:
      - "/root/docker-compose-service/Flink/job_conf/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml"
    networks:
        my_net:
          ipv4_address: 172.18.0.15
  tm:
    image: flink
    hostname: tm
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jm
    command: taskmanager
    links:
      - "jm:jm"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jm
    volumes:
      - "/root/docker-compose-service/Flink/task_conf/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml"
    networks:
        my_net:
          ipv4_address: 172.18.0.16
  redis-server:
    image: redis
    ports:
      - "6379:6379"
    networks:
        my_net:
          ipv4_address: 172.18.0.17


networks:
  my_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1  


